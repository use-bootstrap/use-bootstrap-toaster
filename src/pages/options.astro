---
import Layout from '../components/Layout.astro'
import Code from '../components/Code.astro'
import exampleGlobalOptions from '../components/options/ExampleGlobalOptions?raw'

interface OptionsProps {
  name: string
  type: 'boolean' | 'string' | 'number'
  default: string
  description: string
}

const options: OptionsProps[] = [
  {
    name: 'animation',
    type: 'boolean',
    default: 'true',
    description: `Apply a CSS fade transition to the toast.`,
  },
  {
    name: 'autohide',
    type: 'boolean',
    default: 'true',
    description: `Automatically hide the toast after the delay.`,
  },
  {
    name: 'delay',
    type: 'number',
    default: '4000',
    description: `Delay in milliseconds before hiding the toast.`,
  },
  {
    name: 'gap',
    type: 'number',
    default: '16',
    description: `Gap between toasts (px).`,
  },
  {
    name: 'margin',
    type: 'string',
    default: `'1rem'`,
    description: `Margin of the corner. Can also be filled with a CSS variable. Example: var(--toast-margin).`,
  },
  {
    name: 'placement',
    type: 'string',
    default: `'top-right'`,
    description: `Corner position of the toast. Available values: <code>top-right</code>, <code>top-left</code>, <code>bottom-right</code>, <code>bottom-left</code>.`,
  },
  {
    name: 'classes',
    type: 'string',
    default: `''`,
    description: `Additional classes to apply to the toast element.`,
  },
  {
    name: 'header',
    type: 'string',
    default: `''`,
    description: `Additional information for the toast header section. It can be an object with properties such as icon, title, ago (time), and close button (closeBtn), or a string for the header title.`,
  },
  {
    name: 'body',
    type: 'string',
    default: `''`,
    description: `The content of the toast message to be displayed to the user.`,
  },
]
---

<style is:global>
  table {
    min-width: 32rem;
  }
</style>

<Layout title="Options">
  <h1>Global options</h1>
  <p>You can configure options globally by assigning an object to the variable <code>"window.UseBootstrapToasterOptions"</code>. For example:</p>
  <Code lang="typescript" code={exampleGlobalOptions} />
  <h1 class="mt-5">Options</h1>
  <p>Alternatively, you can customize the options for a specific instance by passing an object directly to the <code>toast</code> function.</p>
  <p><code>toast</code> component prioritizes object options followed by global options and lastly default options</p>
  <div class="table-responsive">
    <table class="table table-bordered">
      <thead>
        <tr>
          <th>Name</th>
          <th>Type</th>
          <th>Default</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        {options.map((config) => (
          <tr>
            <td><code>{config.name}</code></td>
            <td>{config.type}</td>
            <td class="text-nowrap"><code>{config.default}</code></td>
            <td set:html={config.description}></td>
          </tr>
        ))}
      </tbody>
    </table>
  </div>
</Layout>
